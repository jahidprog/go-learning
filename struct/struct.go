// Struct

package main

import "fmt"

// A struct is a collection of fields.
// User struct: user ‡¶è‡¶∞ name ‡¶è‡¶¨‡¶Ç age ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá
type User struct {
	name string // field ‡¶¨‡¶æ member variable
	age  int    // field ‡¶¨‡¶æ member variable
}

func main() {
	// Step-by-step initialization
	var user1 User
	user1 = User{ // Instantiation
		name: "Jahid",
		age:  23,
	}

	fmt.Println("Name: ", user1.name)
	fmt.Println("Age: ", user1.age)

	// Short-hand initialization
	user2 := User{
		name: "islam",
		age:  25,
	}

	fmt.Println("Name: ", user2.name)
	fmt.Println("Age: ", user2.age)
}

/*
üß† 2 Phases of Go Program Execution:
	1. Compilation Phase (compile time)
	2. Execution Phase (runtime)

************* Compilation Phase ***************

‚úÖ What happens:
	- `User` struct type compiled and stored in the code segment.
	- `main()` function compiled.
	- Compiler checks for syntax, types, and builds symbol table.
	- If `main()` function is missing ‚Üí compilation error.

‚úÖ Useful Commands:
	- `go run main.go`   ‚Üí compiles to a temporary binary & runs it.
	- `go build main.go` ‚Üí compiles and creates a binary (e.g., `./main`).

************** Execution Phase ******************

üß† MEMORY LAYOUT DURING EXECUTION:

- Code Segment:
	‚Üí Type definition `User`
	‚Üí Function definition `main()`

- Stack Segment:
	‚Üí A stack frame is created for `main()` function.
	‚Üí Inside that frame:
		‚Ä¢ Variable `user1` ‚Üí stores actual values of `name` and `age`
		‚Ä¢ Variable `user2` ‚Üí also stores actual values directly (value type)

- Heap Segment:
	‚Üí Not used here because:
		‚Ä¢ Structs are value types
		‚Ä¢ No pointer involved
		‚Ä¢ No closure or escape from stack

‚úÖ Execution Flow:
	1. Stack frame for `main()` created
	2. `user1` initialized in two steps (var + assign)
	3. `user2` initialized using shorthand
	4. Prints:
		Name:  Jahid
		Age:  23
		Name:  islam
		Age:  25
	5. Stack frame destroyed after `main()` finishes

‚úÖ Output:
	Name:  Jahid
	Age:  23
	Name:  islam
	Age:  25
*/
