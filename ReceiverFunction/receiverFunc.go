// Receiver Function

package main

import "fmt"

// User ‡¶®‡¶æ‡¶Æ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø custom struct type, ‡¶Ø‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá Name ‡¶ì Age ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶¶‡ßÅ‡¶ü‡¶ø field ‡¶Ü‡¶õ‡ßá
type User struct {
	Name string // member variable / field / property
	Age  int
}

// ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ function ‚Üí struct ‡¶ï‡ßá parameter ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡ßü
func printUserDetails(usr User) {
	fmt.Println("Name:", usr.Name)
	fmt.Println("Age:", usr.Age)
}

// Receiver Function ‚Üí struct ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ function
// üîπ Receiver Function ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶ï‡ßã‡¶®‡ßã struct ‡¶ü‡¶æ‡¶á‡¶™‡ßá‡¶∞ instance ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá directly ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§
// üîπ struct define ‡¶®‡¶æ ‡¶ï‡¶∞‡¶≤‡ßá receiver function ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡¶æ
// üîπ ‡¶è‡¶á ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ function struct ‡¶è‡¶∞ method ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá‡¶ì ‡¶™‡¶∞‡¶ø‡¶ö‡¶ø‡¶§
func (usr User) printDetails() {
	fmt.Println("Name:", usr.Name)
	fmt.Println("Age:", usr.Age)
}

// ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶ø Receiver Function
func (usr User) call(a int) {
	fmt.Println("Name:", usr.Name)
	fmt.Println("Extra Value:", a)
}

func main() {
	// user1 struct instance ‡¶§‡ßà‡¶∞‡¶ø
	var user1 User
	user1 = User{
		Name: "Jahid",
		Age:  25,
	}

	// Receiver function call ‚Üí struct instance dot notation ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü
	user1.printDetails()

	// shortcut initialization
	user2 := User{
		Name: "Islam",
		Age:  23,
	}

	user2.call(2223)
}

/*
	===============================
	üß† MEMORY LAYOUT DURING EXECUTION (RAM)
	===============================

	Go ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶∞‡¶æ‡¶® ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü RAM-‡¶è ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶≠‡¶æ‡¶ó‡ßá memory allocate ‡¶π‡ßü:

	1Ô∏è‚É£ Code Segment (Text Segment)
		- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá compiled ‡¶ï‡¶∞‡¶æ instructions ‡¶•‡¶æ‡¶ï‡ßá‡•§
		- ‡¶Ø‡ßá‡¶Æ‡¶®: function definition, method definition, ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø‡•§
		- read-only segment ‚Üí execute ‡¶π‡ßü, modify ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü ‡¶®‡¶æ‡•§
		- ‡¶Ø‡ßá‡¶Æ‡¶®:
			- func main() {}
			- func (u User) printDetails() {}
			- func printUserDetails(u User) {}

	2Ô∏è‚É£ Stack Segment (Function Call Stack)
		- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá function call ‡¶π‡¶≤‡ßá ‡¶§‡¶æ‡¶∞ local variables ‡¶è‡¶¨‡¶Ç execution context ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡•§
		- Last In First Out (LIFO) ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§
		- ‡¶ñ‡ßÅ‡¶¨ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ allocate ‡¶è‡¶¨‡¶Ç deallocate ‡¶π‡ßü‡•§
		- ‡¶Ø‡ßá‡¶Æ‡¶®:
			- main() call ‡¶π‡¶≤‡ßá ‚Üí main ‡¶è‡¶∞ local variable (user1, user2) stack ‡¶è store ‡¶π‡ßü
			- call() function call ‡¶π‡¶≤‡ßá ‡¶§‡¶æ‡¶∞ local variable (add) stack ‡¶è ‡¶Ø‡¶æ‡ßü

	3Ô∏è‚É£ Heap Segment (Dynamic Memory)
		- ‡¶¨‡ßú ‡¶¨‡¶æ runtime-determined data structures ‡¶è‡¶ñ‡¶æ‡¶®‡ßá store ‡¶π‡ßü
		- ‡¶Ø‡ßá‡¶Æ‡¶®: slices, maps, pointers, interfaces
		- Go runtime automatic garbage collection ‡¶ï‡¶∞‡ßá ‚Üí ‡¶Ö‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ heap memory cleanup ‡¶π‡ßü
		- slow but flexible memory allocation

	4Ô∏è‚É£ Data Segment
		üìç Initialized Data:
			- ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá initialized global ‡¶¨‡¶æ package level variable ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü
			- ‡¶Ø‡ßá‡¶Æ‡¶®: var p = 100

		üìç Uninitialized Data (BSS):
			- ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá uninitialized global variable ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü
			- ‡¶Ø‡ßá‡¶Æ‡¶®: var count int

	5Ô∏è‚É£ Constant Segment
		- ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá constant values store ‡¶π‡ßü
		- ‡¶Ø‡ßá‡¶Æ‡¶®: const a = 10
		- ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã read-only ‚Üí runtime ‡¶è modify ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü ‡¶®‡¶æ

	===============================
	üìå Summary:
	===============================
	| Segment         | Stores                          | Example               |
	|------------------|----------------------------------|------------------------|
	| Code/Text        | Function, method definitions     | func main()            |
	| Stack            | Local variables, function calls  | user1 in main()        |
	| Heap             | Runtime allocated objects        | slices, maps           |
	| Data             | Global/package-level vars        | var p = 100            |
	| BSS              | Uninitialized global vars        | var total int          |
	| Constant         | const values                     | const a = 10           |

	‚õîÔ∏è Note:
	- Stack overflow ‡¶π‡ßü ‡¶Ø‡¶¶‡¶ø ‡¶Ö‡¶®‡ßá‡¶ï recursion ‡¶¨‡¶æ ‡¶¨‡ßú‡ßã function call ‡¶π‡ßü
	- Heap memory ‡¶¨‡ßá‡¶∂‡¶ø use ‡¶ï‡¶∞‡¶≤‡ßá garbage collector workload ‡¶¨‡¶æ‡ßú‡ßá
*/
